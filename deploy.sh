#!/bin/bash

# Script de deploy otimizado para VPS - Fixed for minimal systems
# Uso: ./deploy.sh

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] ‚úÖ $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ùå $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ÑπÔ∏è  $1${NC}"
}

# Banner
echo -e "${BLUE}"
echo "üöÄ =================================="
echo "   DEPLOY FERRAMENTAS FOT√ìGRAFOS"
echo "==================================${NC}"
echo

# Verificar pr√©-requisitos
info "Verificando pr√©-requisitos..."

if ! which docker > /dev/null 2>&1; then
    error "Docker n√£o est√° instalado!"
    echo "Instale com: curl -fsSL https://get.docker.com | sh"
    exit 1
fi

if ! which docker-compose > /dev/null 2>&1; then
    error "Docker Compose n√£o est√° instalado!"
    echo "Tentando usar docker compose plugin..."
    if which docker > /dev/null 2>&1 && docker compose version > /dev/null 2>&1; then
        # Create alias for docker-compose
        echo '#!/bin/bash' > /usr/local/bin/docker-compose
        echo 'docker compose "$@"' >> /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
        log "Docker Compose plugin configurado"
    else
        exit 1
    fi
    exit 1
fi

if ! which npm > /dev/null 2>&1; then
    error "Node.js/NPM n√£o est√° instalado!"
    exit 1
fi

log "Pr√©-requisitos OK"

# Verificar arquivo .env
if [ ! -f .env.production ]; then
    warn "Arquivo .env.production n√£o encontrado!"
    error "Configure suas credenciais do Supabase no arquivo .env.production"
    exit 1
fi

# Verificar se as vari√°veis est√£o configuradas
if grep -q "seu-projeto.supabase.co" .env.production; then
    warn "Configure suas credenciais reais do Supabase no .env.production"
    exit 1
fi

log "Configura√ß√µes OK"

# Instalar depend√™ncias
info "Instalando depend√™ncias..."
npm ci --silent

# Build da aplica√ß√£o
info "Fazendo build da aplica√ß√£o..."
npm run build

if [ ! -d "dist" ]; then
    error "Build falhou - diret√≥rio dist n√£o encontrado"
    exit 1
fi

log "Build conclu√≠do"

# Parar containers existentes
info "Parando containers existentes..."
docker-compose down --remove-orphans 2>/dev/null || true

# Limpar recursos antigos
info "Limpando recursos antigos..."
docker system prune -f --volumes 2>/dev/null || true

# Build e start dos containers
info "Construindo e iniciando containers..."
docker-compose up -d --build

# Aguardar containers iniciarem
info "Aguardando containers iniciarem..."
for i in {1..10}; do
    sleep 1
    if docker-compose ps | grep -q "Up"; then
        break
    fi
done

# Verificar se containers est√£o rodando
info "Verificando status dos containers..."
if ! docker-compose ps | grep -q "Up"; then
    error "Containers n√£o est√£o rodando!"
    echo "Logs dos containers:"
    docker-compose logs --tail=20
    exit 1
fi

log "Containers rodando"

# Testar aplica√ß√£o
info "Testando aplica√ß√£o..."
for i in {1..5}; do
    sleep 5
    if curl -f -s http://localhost:3000/health > /dev/null 2>&1; then
        log "Aplica√ß√£o respondendo"
        break
    elif curl -f -s http://localhost:3000 > /dev/null 2>&1; then
        log "Aplica√ß√£o respondendo"
        break
    elif [ $i -eq 5 ]; then
        error "Aplica√ß√£o n√£o est√° respondendo ap√≥s 5 tentativas"
        echo "Logs da aplica√ß√£o:"
        docker-compose logs --tail=30
        exit 1
    else
        warn "Tentativa $i/5 - Aguardando aplica√ß√£o..."
    fi
done

# Informa√ß√µes finais
echo
echo -e "${GREEN}üéâ =================================="
echo "      DEPLOY CONCLU√çDO COM SUCESSO!"
echo "====================================${NC}"
echo
echo -e "${BLUE}üì± Aplica√ß√£o dispon√≠vel em:${NC}"
echo "   ‚Ä¢ Local: http://localhost:3000"
echo "   ‚Ä¢ Rede: http://$(hostname -I | awk '{print $1}'):3000"
echo
echo -e "${BLUE}üõ†Ô∏è  Comandos √∫teis:${NC}"
echo "   ‚Ä¢ Ver logs: docker-compose logs -f"
echo "   ‚Ä¢ Parar: docker-compose down"
echo "   ‚Ä¢ Reiniciar: docker-compose restart"
echo "   ‚Ä¢ Status: docker-compose ps"
echo
echo -e "${BLUE}üìä Status dos containers:${NC}"
docker-compose ps
echo

log "Deploy finalizado!"